@model WebDevProject.Models.TopicViewModel
<!-- This container div holds the whole page. -->
<div class="container-fluid mainBody">



    <!-- Main display area. -->

    <div class="row">

        <!-- Left menu and pane. -->

        <div class="col-3 scrollable-menu leftPane listPane">
            <div>
                <!--  Right now all the list items are just text, but we should be able to replace them with the button things. -->
                <ul>
                    @{ var topicId = Html.DisplayFor(model => model.theTopic.Id);}
                    @foreach (var item in Model.Questions)
                    {
                        @if (item.isMultipleChoice)
                        {
                            <li>
                                <a href="/Home/MultipleChoiceView/@item.Id/@topicId"><button class="text-left col-md-10">Question @item.questionOrder</button></a>
                            </li>
                        }
                        else
                        {
                            <li>
                                <a href="/Home/CodeQuestionView/@item.Id/@topicId"><button class="text-left col-md-10">Question @item.questionOrder</button></a>
                            </li>
                        }
                    }
                </ul>
            </div>

        </div>

        <!-- The rightPane holds all instructor material. Later it can also be covered up by expanding lists, which I haven't made. col-8 defines it as 8 pandels wide in bootstrap, scrollable-menu let's CSS apply scrolling to it, and rightPane allows CSS to customize it specifically. -->
        <div class="col-9 scrollable-menu rightPane" style="padding-top: 20px">

            <h1>@Html.DisplayFor(model => model.theTopic.topicTitle)</h1>

            <!-- Video stuff. -->
            @{ string youtubeURL = Model.theTopic.videoURL;}
            @{ string MP4Link = Model.theTopic.MP4Link;}

            <div class="row" style="padding-left: 20px">
                @if (youtubeURL != "" && youtubeURL != "NULL" && youtubeURL != null)
                {
                    if (MP4Link != "" && MP4Link != "NULL" && MP4Link != null)
                    {
                        <div class="col-xs-6 YoutubeVideo smallVid">
                            <iframe src="@youtubeURL" frameborder="0" allowfullscreen></iframe>
                        </div>
                        <div class="col-xs-6 UploadVideo smallVid">
                            <video controls>
                                <source src="~/mp4/@MP4Link" type="video/mp4">
                                <!--<source src="Video.ogg" type="video/ogg">-->
                                Your browser does not support the video tag.
                            </video>
                        </div>
                    }
                    else
                    {
                        <div class="col-xs-12 YoutubeVideo wideVid">
                            <iframe src="@youtubeURL" frameborder="0" allowfullscreen></iframe>
                        </div>
                    }
                }
                else
                {
                    if (MP4Link != "" && MP4Link != "NULL" && MP4Link != null)
                    {
                        <div class="col-xs-12 UploadVideo wideVid">
                            <video controls>
                                <source src="~/mp4/@MP4Link" type="video/mp4">
                                <!--<source src="Video.ogg" type="video/ogg">-->
                                Your browser does not support the video tag.
                            </video>
                        </div>
                    }
                }
            </div>

            <!-- This place can be filled with teacher supplied text. We should probably still sanitize this input somehow. -->

                
                <p>@Html.DisplayFor(model => model.theTopic.lectureText)</p>

            



        </div>
    </div>
</div>